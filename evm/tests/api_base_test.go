package tests

import (
	"math/big"
	"testing"

	cachedstorage "github.com/arcology-network/common-lib/cachedstorage"
	"github.com/arcology-network/concurrenturl/v2"
	urlcommon "github.com/arcology-network/concurrenturl/v2/common"
	curstorage "github.com/arcology-network/concurrenturl/v2/storage"
	"github.com/arcology-network/concurrenturl/v2/type/commutative"
	"github.com/arcology-network/evm/common"
	"github.com/arcology-network/evm/core/types"
	"github.com/arcology-network/evm/crypto"
	adaptor "github.com/arcology-network/vm-adaptor/evm"
)

var (
	bytecode = ""
)

func TestApiEntry(t *testing.T) {
	config := MainConfig()
	persistentDB := cachedstorage.NewDataStore()
	meta, _ := commutative.NewMeta(urlcommon.NewPlatform().Eth10Account())
	persistentDB.Inject(urlcommon.NewPlatform().Eth10Account(), meta)
	db := curstorage.NewTransientDB(persistentDB)

	url := concurrenturl.NewConcurrentUrl(db)
	api := adaptor.NewAPI(db, url)
	statedb := adaptor.NewStateDB(api, db, url)
	statedb.Prepare(common.Hash{}, common.Hash{}, 0)
	statedb.CreateAccount(coinbase)
	statedb.CreateAccount(user1)
	statedb.AddBalance(user1, new(big.Int).SetUint64(1e18))
	_, transitions := url.Export(true)
	t.Log("\n" + formatTransitions(transitions))

	// Deploy.
	url = concurrenturl.NewConcurrentUrl(db)
	url.Import(transitions)
	url.PostImport()
	url.Commit([]uint32{0})
	api = adaptor.NewAPI(db, url)
	statedb = adaptor.NewStateDB(api, db, url)
	eu := adaptor.NewEU(config.ChainConfig, *config.VMConfig, config.Chain, statedb, api, db, url)

	config.Coinbase = &coinbase
	config.BlockNumber = new(big.Int).SetUint64(10000000)
	config.Time = new(big.Int).SetUint64(10000000)

	// --------------- Execute the message
	msg := types.NewMessage(user1, nil, 0, new(big.Int).SetUint64(0), 1e15, new(big.Int).SetUint64(1), common.Hex2Bytes(bytecode), nil, true)           // Build the message
	_, transitions, receipt := eu.Run(common.BytesToHash([]byte{1, 1, 1}), 1, &msg, adaptor.NewEVMBlockContextV2(config), adaptor.NewEVMTxContext(msg)) // Execute it
	// ---------------

	// t.Log("\n" + formatTransitions(accesses))
	t.Log("\n" + formatTransitions(transitions))
	t.Log(receipt)
	contractAddress := receipt.ContractAddress

	if receipt.Status != 1 {
		t.Error("Error: Execution failed!!!")
	}

	// Set.
	url = concurrenturl.NewConcurrentUrl(db)
	url.Import(transitions)
	errs := url.Commit([]uint32{1})
	if len(errs) != 0 {
		t.Error(errs)
		return
	}
	api = adaptor.NewAPI(db, url)
	statedb = adaptor.NewStateDB(api, db, url)
	eu = adaptor.NewEU(config.ChainConfig, *config.VMConfig, config.Chain, statedb, api, db, url)

	config.BlockNumber = new(big.Int).SetUint64(10000001)
	config.Time = new(big.Int).SetUint64(10000001)

	data := crypto.Keccak256([]byte("set(address,uint256)"))[:4]
	data = append(data, common.BytesToHash(user1.Bytes()).Bytes()...)
	data = append(data, common.BytesToHash([]byte{0xcc}).Bytes()...)
	msg = types.NewMessage(user1, &contractAddress, 1, new(big.Int).SetUint64(0), 1e15, new(big.Int).SetUint64(1), data, nil, true)
	_, transitions, receipt = eu.Run(common.BytesToHash([]byte{2, 2, 2}), 2, &msg, adaptor.NewEVMBlockContextV2(config), adaptor.NewEVMTxContext(msg))
	t.Log("\n" + formatTransitions(transitions))
	t.Log(receipt)

	// Get.
	url = concurrenturl.NewConcurrentUrl(db)
	url.Import(transitions)
	url.PostImport()
	errs = url.Commit([]uint32{2})
	if len(errs) != 0 {
		t.Error(errs)
		return
	}
	api = adaptor.NewAPI(db, url)
	statedb = adaptor.NewStateDB(api, db, url)
	eu = adaptor.NewEU(config.ChainConfig, *config.VMConfig, config.Chain, statedb, api, db, url)

	config.BlockNumber = new(big.Int).SetUint64(10000002)
	config.Time = new(big.Int).SetUint64(10000002)

	data = crypto.Keccak256([]byte("getSum()"))[:4]
	msg = types.NewMessage(user1, &contractAddress, 2, new(big.Int).SetUint64(0), 1e15, new(big.Int).SetUint64(1), data, nil, true)
	accesses, transitions, receipt := eu.Run(common.BytesToHash([]byte{3, 3, 3}), 3, &msg, adaptor.NewEVMBlockContextV2(config), adaptor.NewEVMTxContext(msg))
	t.Log("\n" + formatTransitions(accesses))
	t.Log("\n" + formatTransitions(transitions))

	t.Log(receipt)
}
